stages:
  - test
  - prepare
  - trigger
  - sync

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # We want full history so that "git describe" always works correctly.
  GIT_DEPTH: 0
  FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"
  # We always want to run with the Go version installed in a Docker image.
  GOTOOLCHAIN: local

default:
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - scheduler_failure
      - data_integrity_failure

test:
  stage: test

  image: golang:1.21-alpine3.18

  services:
    - name: registry.gitlab.com/tozd/docker/postgresql:16
      alias: postgres
      variables:
        LOG_TO_STDOUT: 1
        PGSQL_ROLE_1_USERNAME: test
        PGSQL_ROLE_1_PASSWORD: test
        PGSQL_DB_1_NAME: test
        PGSQL_DB_1_OWNER: test

  variables:
    TIME: 1m
    POSTGRES: "postgres://test:test@postgres:5432"
    # We list defaults so that log filenames have these values in it.
    READERS: 1
    WRITERS: 1
    SIZE: 1MB
    VARY: "false"
    RUN_FLAGS: "-race"
    DATA: "$CI_PROJECT_DIR/data"

  before_script:
    - apk --update add make bash gcc musl-dev
    - ulimit -a
    - mount | grep "$CI_BUILDS_DIR"

  script:
    - make benchmark

  artifacts:
    when: always
    paths:
      - "*.log"
    expire_in: never

  parallel:
    matrix:
      - ENGINE:
        - badger
        - bbolt
        - bitcask
        - buntdb
        - fs
        # Requires xfs.
        # - fsclone
        - immudb
        - nutsdb
        - pebble
        - postgres
        - postgreslo
        - sqlite

lint:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash gcc musl-dev
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

  script:
    - make lint-ci

  artifacts:
    when: always
    reports:
      codequality: codeclimate.json
    expire_in: never

fmt:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash git gcc musl-dev grep
    - go install mvdan.cc/gofumpt@v0.5.0
    - go install golang.org/x/tools/cmd/goimports@v0.13.0

  script:
    - make fmt-ci

lint_docs:
  stage: test

  image: node:17-alpine3.14

  before_script:
    - apk --update add make bash

  script:
    - make lint-docs

audit:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash git gcc musl-dev
    - go install github.com/sonatype-nexus-community/nancy@v1.0.42

  script:
    - make audit

commits:
  stage: test

  image: golang:1.21-alpine3.18

  variables:
    GIT_DEPTH: "0"

  before_script:
    - apk --update add git

  script:
    - '! git log --oneline "-G^(<<<<<<<|=======|>>>>>>>)" | grep "^"'

prepare:
  stage: prepare

  image: alpine:3.18

  script: ./generate.sh

  artifacts:
    paths:
      - .gitlab-ci-template-header.yml
      - ".gitlab-ci-template-entry*.yml"
      - generated-gitlab-ci.yml

  rules:
    # We run benchmarks the main branch.
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PROJECT_PATH == "go-benchmark-kvstore/go-benchmark-kvstore"'

  # We do not need build artifacts in this job.
  dependencies: []

trigger:
  stage: trigger

  trigger:
    include:
      - artifact: generated-gitlab-ci.yml
        job: prepare

  when: manual

  rules:
    # We run benchmarks the main branch.
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PROJECT_PATH == "go-benchmark-kvstore/go-benchmark-kvstore"'

sync_config:
  stage: sync

  image:
    name: registry.gitlab.com/tozd/gitlab/config/tag/v0-5-0:latest-debug
    entrypoint: [""]

  script:
    - /gitlab-config set

  rules:
    - if: '$GITLAB_API_TOKEN && $SOPS_AGE_KEY_FILE && $CI_COMMIT_BRANCH == "main"'
      changes:
        - .gitlab-conf.yml

  # We do not need build artifacts in this job.
  dependencies: []
